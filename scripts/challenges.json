{
  "challenges": [
    {
      "title": "Hello World",
      "content": "Print a 'Hello World' message to the console."
    },
    {
      "title": "Two Sum",
      "content": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."
    },
    {
      "title": "Jump Game",
      "content": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise."
    },
    {
      "title": "Jump Game II",
      "content": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0]. Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 <= j <= nums[i] and i + j < n \nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1]."
    },
    {
      "title": "Climbing Stairs",
      "content": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"
    },
    {
      "title": "Merge Sorted Array",
      "content": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n."
    },
    {
      "title": "Same Tree",
      "content": "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."
    },
    {
      "title": "Most Popular Video Creator",
      "content": "You are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creator[i], has an id of ids[i], and has views[i] views. The popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video. If multiple creators have the highest popularity, find all of them. If multiple videos have the highest view count for a creator, find the lexicographically smallest id. Return a 2D array of strings answer where answer[i] = [creator, id] means that creator has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order."
    },
    {
      "title": "Minimum Amount of Time to Collect Garbage",
      "content": "You are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute. You are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1. There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house. Only one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything. Return the minimum number of minutes needed to pick up all the garbage."
    },
    {
      "title": "Sudoku Solver",
      "content": "Write a program to solve a Sudoku puzzle by filling the empty cells. The '.' character indicates empty cells."
    },
    {
      "title": "Wildcard Matching",
      "content": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial)."
    },
    {
      "title": "Roman to Integer",
      "content": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Given a roman numeral, convert it to an integer."
    },
    {
      "title": "Rotate Image",
      "content": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."
    },
    {
      "title": "Group Anagrams",
      "content": "Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."
    },
    {
      "title": "Search Insert Position",
      "content": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity."
    },
    {
      "title": "Unique Binary Search Trees",
      "content": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n."
    },
    {
      "title": "Largest Rectangle in Histogram",
      "content": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram."
    },
    {
      "title": "Decode Ways",
      "content": "A message containing letters from A-Z can be encoded into numbers using the following mapping: A = 1, B = 2, (...), Z = 26. o decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\"AAJF\" with the grouping (1 1 10 6)\n\"KJF\" with the grouping (11 10 6)\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nGiven a string s containing only digits, return the number of ways to decode it.\nThe test cases are generated so that the answer fits in a 32-bit integer."
    },
    {
      "title": "Partition List",
      "content": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. \nYou should preserve the original relative order of the nodes in each of the two partitions."
    },
    {
      "title": "Plus One",
      "content": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits."
    },
    {
      "title": "N-Queens",
      "content": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively."
    },
    {
      "title": "Spiral Matrix",
      "content": "Given an m x n matrix, return all elements of the matrix in spiral order."
    },
    {
      "title": "Unique Paths",
      "content": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner."
    },
    {
      "title": "Length of Last Word",
      "content": "Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only."
    },
    {
      "title": "Word Search",
      "content": "Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once."
    },
    {
      "title": "Restore IP Addresses",
      "content": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order."
    },
    {
      "title": "Subsets II",
      "content": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order."
    },
    {
      "title": "Gray Code",
      "content": "An n-bit gray code sequence is a sequence of 2n integers where:\nEvery integer is in the inclusive range [0, 2n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\nGiven an integer n, return any valid n-bit gray code sequence."
    },
    {
      "title": "Reverse Linked List II",
      "content": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list."
    },
    {
      "title": "Linked List Cycle",
      "content": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the linked list. Otherwise, return false."
    },
    {
      "title": "LRU Cache",
      "content": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class:\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\nThe functions get and put must each run in O(1) average time complexity."
    },
    {
      "title": "Word Ladder",
      "content": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists."
    },
    {
      "title": "Sum Root to Leaf Numbers",
      "content": "You are given the root of a binary tree containing digits from 0 to 9 only. Each root-to-leaf path in the tree represents a number.\n - For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123. Return the total sum of all root-to-leaf numbers."
    },
    {
      "title": "Flatten Binary Tree to Linked List",
      "content": "Given the root of a binary tree, flatten the tree into a \"linked list\":\n - The \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\n - The \"linked list\" should be in the same order as a pre-order traversal of the binary tree."
    },
    {
      "title": "Path Sum",
      "content": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum."
    },
    {
      "title": "Pascal's Triangle",
      "content": "Given an integer numRows, return the first numRows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it."
    },
    {
      "title": "Sum of All Subset XOR Totals",
      "content": "The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty. Given an array nums, return the sum of all XOR totals for every subset of nums. An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b."
    },
    {
      "title": "Tenth Line",
      "content": "Shell: Given a text file file.txt, print just the 10th line of the file."
    }
  ],
  "upcoming": [
    "Two Sum",
    "Jump Game",
    "Jump Game II",
    "Climbing Stairs",
    "Merge Sorted Array",
    "Same Tree",
    "Most Popular Video Creator",
    "Minimum Amount of Time to Collect Garbage",
    "Sudoku Solver",
    "Wildcard Matching",
    "Wildcard Matching",
    "Roman to Integer",
    "Rotate Image",
    "Group Anagrams",
    "Search Insert Position",
    "Unique Binary Search Trees",
    "Largest Rectangle in Histogram",
    "Decode Ways",
    "Partition List",
    "Plus One",
    "N-Queens",
    "Spiral Matrix",
    "Unique Paths",
    "Length of Last Word",
    "Word Search",
    "Restore IP Addresses",
    "Subsets II",
    "Gray Code",
    "Reverse Linked List II",
    "Linked List Cycle",
    "LRU Cache",
    "Word Ladder",
    "Sum Root to Leaf Numbers",
    "Flatten Binary Tree to Linked List",
    "Path Sum",
    "Pascal's Triangle",
    "Sum of All Subset XOR Totals",
    "Tenth Line"
  ],
  "old": [
    "Reverse Linked List II",
    "Climbing Stairs",
    "Wildcard Matching",
    "Partition List",
    "Search Insert Position",
    "Plus One",
    "Largest Rectangle in Histogram",
    "Minimum Amount of Time to Collect Garbage",
    "Roman to Integer",
    "Word Search",
    "Pascal's Triangle",
    "Jump Game",
    "Sudoku Solver",
    "Decode Ways",
    "Length of Last Word",
    "Linked List Cycle",
    "Sum Root to Leaf Numbers",
    "LRU Cache",
    "Unique Binary Search Trees",
    "Same Tree",
    "Spiral Matrix",
    "Word Ladder",
    "Subsets II",
    "Gray Code",
    "Most Popular Video Creator",
    "Merge Sorted Array",
    "Two Sum",
    "Restore IP Addresses",
    "Flatten Binary Tree to Linked List",
    "Group Anagrams",
    "Jump Game II"
  ],
  "last_problem_title": "Pascals Triangle",
  "last_problem_content": "Given an integer numRows, return the first numRows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it."
}